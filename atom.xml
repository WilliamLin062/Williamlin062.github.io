<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>William的個人空間</title>
  
  
  <link href="https://williamlin062.github.io/atom.xml" rel="self"/>
  
  <link href="https://williamlin062.github.io/"/>
  <updated>2023-09-18T03:42:20.152Z</updated>
  <id>https://williamlin062.github.io/</id>
  
  <author>
    <name>WilliamLin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kata-C-Sharp-ListFiltering</title>
    <link href="https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-ListFiltering/"/>
    <id>https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-ListFiltering/</id>
    <published>2023-09-18T02:35:08.000Z</published>
    <updated>2023-09-18T03:42:20.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>過濾列表中不是整數的物件</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>使用 Enumerable.OfType 過濾</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListFilterer</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">int</span>&gt; <span class="title">GetIntegersFromList</span>(<span class="params">List&lt;<span class="built_in">object</span>&gt; listOfItems</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">return</span> listOfItems.OfType&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進的地方"><a href="#改進的地方" class="headerlink" title="改進的地方"></a>改進的地方</h1><p>使用自訂的迭帶器這樣在輸入很大的時候效率會好一點</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;過濾列表中不是整數的物件&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-MultiplesOf3or5</title>
    <link href="https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-MultiplesOf3or5/"/>
    <id>https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-MultiplesOf3or5/</id>
    <published>2023-09-18T02:34:43.000Z</published>
    <updated>2023-09-18T03:38:40.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>找出1~輸入數字區間中3和5的倍數加起來返回</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>循環一次數字區間檢查是不是3或5的倍數</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">value</span> &lt;= <span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">value</span> ; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        ans += i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進的地方"><a href="#改進的地方" class="headerlink" title="改進的地方"></a>改進的地方</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;找出1~輸入數字區間中3和5的倍數加起來返回&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-CreditCardMask/"/>
    <id>https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-CreditCardMask/</id>
    <published>2023-09-18T02:33:56.638Z</published>
    <updated>2023-09-18T03:33:30.470Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="using-System-public-static-class-Kata-x2F-x2F-return-masked-string-public-static-string-Maskify-string-cc-string-ans-x3D-””-if-cc-Length-lt-5-return-cc-for-int-i-x3D-cc-Length-1-i-gt-1-i–-if-i-lt-cc-Length-4-ans-x3D-”-”-else-ans-x3D-cc-i-return-Reverse-ans-public-static-string-Reverse-string-s-char-charArray-x3D-s-ToCharArray-Array-Reverse-charArray-return-new-string-charArray"><a href="#using-System-public-static-class-Kata-x2F-x2F-return-masked-string-public-static-string-Maskify-string-cc-string-ans-x3D-””-if-cc-Length-lt-5-return-cc-for-int-i-x3D-cc-Length-1-i-gt-1-i–-if-i-lt-cc-Length-4-ans-x3D-”-”-else-ans-x3D-cc-i-return-Reverse-ans-public-static-string-Reverse-string-s-char-charArray-x3D-s-ToCharArray-Array-Reverse-charArray-return-new-string-charArray" class="headerlink" title="using System;public static class Kata{  &#x2F;&#x2F; return masked string  public static string Maskify(string cc)  {    string ans &#x3D;””;    if(cc.Length &lt; 5)　return cc;    for(int  i  &#x3D; cc.Length-1  ; i &gt; -1 ; i–){      if(i &lt; cc.Length - 4){          ans+&#x3D;”#”;      }else{          ans+&#x3D;cc[i];      }    }    return Reverse(ans);  }  public static string Reverse( string s ){    char[] charArray &#x3D; s.ToCharArray();    Array.Reverse(charArray);    return new string(charArray);}}"></a>using System;<br>public static class Kata<br>{<br>  &#x2F;&#x2F; return masked string<br>  public static string Maskify(string cc)<br>  {<br>    string ans &#x3D;””;<br>    if(cc.Length &lt; 5)　return cc;<br>    for(int  i  &#x3D; cc.Length-1  ; i &gt; -1 ; i–){<br>      if(i &lt; cc.Length - 4){<br>          ans+&#x3D;”#”;<br>      }else{<br>          ans+&#x3D;cc[i];<br>      }<br><br>    }<br><br>    return Reverse(ans);<br>  }<br>  public static string Reverse( string s )<br>{<br>    char[] charArray &#x3D; s.ToCharArray();<br>    Array.Reverse(charArray);<br>    return new string(charArray);<br>}<br>}</h2><h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>把字串除了最後四個字元以外的字用#遮蔽</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>從後面開始處裡字串並填入新的變數裡返回</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// return masked string</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Maskify</span>(<span class="params"><span class="built_in">string</span> cc</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> ans =<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(cc.Length &lt; <span class="number">5</span>)　<span class="keyword">return</span> cc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span>  i  = cc.Length<span class="number">-1</span>  ; i &gt; <span class="number">-1</span> ; i--)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i &lt; cc.Length - <span class="number">4</span>)&#123;</span><br><span class="line">          ans+=<span class="string">&quot;#&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          ans+=cc[i];</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Reverse(ans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Reverse</span>(<span class="params"> <span class="built_in">string</span> s </span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span>[] charArray = s.ToCharArray();</span><br><span class="line">    Array.Reverse(charArray);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">string</span>(charArray);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進的地方"><a href="#改進的地方" class="headerlink" title="改進的地方"></a>改進的地方</h1><p>使用Substring切下後四個字元在使用PadLeft填充#返回</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// return masked string</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Maskify</span>(<span class="params"><span class="built_in">string</span> cc</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">int</span> len = cc.Length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;=<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">return</span> cc;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> cc.Substring(len<span class="number">-4</span>).PadLeft(len, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;using-System-public-static-class-Kata-x2F-x2F-return-masked-string-public-static-string-Maskify-string-cc-string-ans-x3D-””-if-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-IsThisATriangle</title>
    <link href="https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-IsThisATriangle/"/>
    <id>https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-IsThisATriangle/</id>
    <published>2023-09-18T02:32:50.000Z</published>
    <updated>2023-09-18T02:51:40.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>給三個長度判斷能不能組成三角形</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>三角形的特性</p><ol><li>任意兩邊加其他會大於第三邊</li></ol><p>只需要判斷有沒有滿足這個特性還有是否為負數長度</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Triangle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsTriangle</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">int</span> [] arr = &#123;a,b,c&#125;;</span><br><span class="line">       Array.Sort(arr);</span><br><span class="line">       <span class="keyword">if</span>( arr[<span class="number">0</span>]+arr[<span class="number">1</span>] &lt;= arr[<span class="number">2</span>])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">int</span> i  = <span class="number">0</span> ; i&lt;arr.Length ; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>( arr[i] &lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進的地方"><a href="#改進的地方" class="headerlink" title="改進的地方"></a>改進的地方</h1><p>可以更簡短只需要在返回時判斷有沒有符合特性就好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;給三個長度判斷能不能組成三角形&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-BreakCamelCase</title>
    <link href="https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-BreakCamelCase/"/>
    <id>https://williamlin062.github.io/2023/09/18/Kata-C-Sharp-BreakCamelCase/</id>
    <published>2023-09-18T02:31:52.000Z</published>
    <updated>2023-09-18T03:34:17.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>駝峰命名法切割</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>建立一個StringBuilder在遍歷字串的時候加入至StringBuilder並判斷是否為大寫，是的話在前面插入空格</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">BreakCamelCase</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span>();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="built_in">char</span> c <span class="keyword">in</span> str )&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(Char.IsUpper(c)) sb.Append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      sb.Append(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  sb.ToString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進的地方"><a href="#改進的地方" class="headerlink" title="改進的地方"></a>改進的地方</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;駝峰命名法切割&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-FindNextPerfectSquare</title>
    <link href="https://williamlin062.github.io/2023/09/15/Kata-C-Sharp-FindNextPerfectSquare/"/>
    <id>https://williamlin062.github.io/2023/09/15/Kata-C-Sharp-FindNextPerfectSquare/</id>
    <published>2023-09-15T03:08:27.000Z</published>
    <updated>2023-09-15T03:33:24.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>找到下一個平方數</p><p>比如:</p><p><code>121 = 11 * 11 需要回傳 144 = 12 * 12</code></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h5 id="1-找出平方根在加一返回"><a href="#1-找出平方根在加一返回" class="headerlink" title="1.找出平方根在加一返回"></a>1.找出平方根在加一返回</h5><p>此題關鍵是需要超高精度平方根運算方式 c#內建 Sqrt 的 double 精度不足在 11 位數以上會有細微偏差導致失敗</p><p>找出平方根有幾種方法:</p><ol><li>牛顿迭帶法</li><li>巴比倫方法</li></ol><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Narcissistic</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span>[] valString = Convert.ToString(<span class="keyword">value</span>).ToCharArray();</span><br><span class="line">                <span class="built_in">int</span> len = valString.Length;</span><br><span class="line">                <span class="built_in">long</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span>( <span class="built_in">char</span> digitChar <span class="keyword">in</span> valString)&#123;</span><br><span class="line">                  <span class="built_in">int</span> digitValue = digitChar - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                  sum += (<span class="built_in">long</span>)Math.Pow(digitValue,len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum == <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="看到更好的寫法"><a href="#看到更好的寫法" class="headerlink" title="看到更好的寫法"></a>看到更好的寫法</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Narcissistic</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">value</span>.ToString();</span><br><span class="line">    <span class="keyword">return</span> str.Sum(c =&gt; Math.Pow(Convert.ToInt16(c.ToString()), str.Length)) == <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;找到下一個平方數&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;121 = 11 * 11 需要回傳 144 = 12 * 12&lt;/cod</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-PlayingWithDigits</title>
    <link href="https://williamlin062.github.io/2023/09/14/Kata-C-Sharp-PlayingWithDigits/"/>
    <id>https://williamlin062.github.io/2023/09/14/Kata-C-Sharp-PlayingWithDigits/</id>
    <published>2023-09-14T02:32:19.000Z</published>
    <updated>2023-09-18T03:01:00.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>檢測輸入數字是否滿足以下特性</p><p>比如:</p><p><code>89 --&gt; 81 + 92 = 89 * 1</code></p><p><code>695 --&gt; 6² + 9³ + 5⁴= 1390 = 695 * 2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1</span><br><span class="line">digPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k</span><br><span class="line">digPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2</span><br><span class="line">digPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>將數字轉為字串後遍歷對各個數字做<code>a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...)</code> 計算後加總起來，檢測是不是n的倍數</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DigPow</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">digPow</span>(<span class="params"><span class="built_in">int</span> n, <span class="built_in">int</span> p</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> numberLength = Convert.ToString(n).Length;</span><br><span class="line">    <span class="built_in">int</span> roughNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> numbers = Convert.ToString(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; numberLength; i++, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> dig = Convert.ToInt32(numbers[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            roughNumber += (<span class="built_in">int</span>)Math.Pow(dig, p + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> roughNumber % n == <span class="number">0</span> ? roughNumber / n : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進方法"><a href="#改進方法" class="headerlink" title="改進方法"></a>改進方法</h1><p>使用數學方法取得各個位數不是使用字串轉換操作，減少轉換的性能開銷</p><p>可以使用字典紀錄數字減少一些重複計算的性能問題</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;檢測輸入數字是否滿足以下特性&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;89 --&amp;gt; 81 + 92 = 89 * 1&lt;/cod</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kata-C-Sharp-DuplicateEncoder</title>
    <link href="https://williamlin062.github.io/2023/09/14/Kata-C-Sharp-DuplicateEncoder/"/>
    <id>https://williamlin062.github.io/2023/09/14/Kata-C-Sharp-DuplicateEncoder/</id>
    <published>2023-09-14T01:29:11.000Z</published>
    <updated>2023-09-18T03:27:21.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>檢查輸入字串有沒有重複符號，如果出現次數超過一次用<code>)</code>表示沒有則使用<code>(</code></p><p>比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;din&quot;      =&gt;  &quot;(((&quot;</span><br><span class="line">&quot;recede&quot;   =&gt;  &quot;()()()&quot;</span><br><span class="line">&quot;Success&quot;  =&gt;  &quot;)())())&quot;</span><br><span class="line">&quot;(( @&quot;     =&gt;  &quot;))((&quot; </span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>遍歷字串紀錄出現次數，再依題目規則返回新的字串</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DuplicateEncode</span>(<span class="params"><span class="built_in">string</span> word</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">string</span> ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="built_in">char</span> s <span class="keyword">in</span> word)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">int</span> count = word.Where(w =&gt; <span class="built_in">char</span>.ToLower(w) == <span class="built_in">char</span>.ToLower(s)).Count();</span><br><span class="line">          <span class="keyword">if</span> (count &gt; <span class="number">1</span>) ans += <span class="string">@&quot;)&quot;</span>;</span><br><span class="line">          <span class="keyword">else</span> ans += <span class="string">@&quot;(&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改進方法"><a href="#改進方法" class="headerlink" title="改進方法"></a>改進方法</h1><p>使用字典紀錄出現次數而不是使用Linq每個循環都查一遍</p><p>使用String Builder 因為字串操作次數有可能會很大使用string會帶來額外的性能開銷</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;檢查輸入字串有沒有重複符號，如果出現次數超過一次用&lt;code&gt;)&lt;/code&gt;表示沒有則使用&lt;code&gt;(&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比如</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CodeWars C# Does my number look big in this?水仙花數(Narcissistic)</title>
    <link href="https://williamlin062.github.io/2023/09/13/Kata-C-Sharp-IsNarcissistic/"/>
    <id>https://williamlin062.github.io/2023/09/13/Kata-C-Sharp-IsNarcissistic/</id>
    <published>2023-09-13T00:52:40.000Z</published>
    <updated>2023-09-15T03:14:37.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>檢測輸入數字是否是一個<code>自戀數</code></p><p>比如:</p><p><code>153 = 1^3 + 5^3 + 3^3</code></p><p><code>1938 = 1^4 + 9^4 + 3^4 + 8^4</code></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h5 id="1-將數字轉字串再遍歷一遍對數字處理-暴力解法"><a href="#1-將數字轉字串再遍歷一遍對數字處理-暴力解法" class="headerlink" title="1.將數字轉字串再遍歷一遍對數字處理 (暴力解法)"></a>1.將數字轉字串再遍歷一遍對數字處理 (暴力解法)</h5><p>優點:簡單實現</p><p>可以改進的地方: 將數值儲存起來避免重複使用Pow計算、直接使用數學方法取得每個數字</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Narcissistic</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span>[] valString = Convert.ToString(<span class="keyword">value</span>).ToCharArray();</span><br><span class="line">                <span class="built_in">int</span> len = valString.Length;</span><br><span class="line">                <span class="built_in">long</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span>( <span class="built_in">char</span> digitChar <span class="keyword">in</span> valString)&#123;</span><br><span class="line">                  <span class="built_in">int</span> digitValue = digitChar - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                  sum += (<span class="built_in">long</span>)Math.Pow(digitValue,len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum == <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="看到更好的寫法"><a href="#看到更好的寫法" class="headerlink" title="看到更好的寫法"></a>看到更好的寫法</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Kata</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Narcissistic</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">value</span>.ToString();</span><br><span class="line">    <span class="keyword">return</span> str.Sum(c =&gt; Math.Pow(Convert.ToInt16(c.ToString()), str.Length)) == <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;檢測輸入數字是否是一個&lt;code&gt;自戀數&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;153 = 1^3 + 5^3 + </summary>
      
    
    
    
    
    <category term="-CodeWars -C# -解題 -Narcissistic -數學問題" scheme="https://williamlin062.github.io/tags/CodeWars-C-%E8%A7%A3%E9%A1%8C-Narcissistic-%E6%95%B8%E5%AD%B8%E5%95%8F%E9%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>重拾ReactNative(一)</title>
    <link href="https://williamlin062.github.io/2023/07/14/%E9%87%8D%E6%8B%BEReactNative-1/"/>
    <id>https://williamlin062.github.io/2023/07/14/%E9%87%8D%E6%8B%BEReactNative-1/</id>
    <published>2023-07-14T07:13:44.000Z</published>
    <updated>2023-07-31T06:55:18.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近主管終於放棄 Xamarin 改使用 ReactNative 開發 APP，作為提出建議的人這個任務最後也落到我頭上來了，記憶中最後一次使用 RN 已經是三年多前的事情了很多東西都不同了，於是只好在開發的過程中慢慢重新學習 ReactNative 還有其他的套件</p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>經過思考過後決定使用 expo，原因如下:</p><ul><li>簡化開發流程</li><li>避免不必要的問題</li><li>速度還有方便性</li></ul><p>其餘主要使用的套件有:</p><ul><li>React Navigation</li><li>Redux</li><li>React Native Paper</li><li>React Native Render HTML</li><li>React Native Vector Icon</li></ul><p>另外為了避免 JavaScript 各種神奇的問題，還有挑戰自我這次使用 TypeScript 做為開發語言</p><h1 id="過程中遇到的各種問題"><a href="#過程中遇到的各種問題" class="headerlink" title="過程中遇到的各種問題"></a>過程中遇到的各種問題</h1><h3 id="TypeScript-型別"><a href="#TypeScript-型別" class="headerlink" title="TypeScript 型別"></a>TypeScript 型別</h3><p>TypeScript 作為 JavaScript 的超集提供了原本沒有的型別檢查功能，剛開始使用的時候在寫第一個 Component 的時候直接撞牆，這是一個類組建在 JavaScript 中是沒有問題的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constrostor</span>(<span class="params">props</span>) &#123;&#125;</span><br><span class="line">  <span class="attr">state</span>: <span class="title class_">MyState</span> = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.message&#125; &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 TypeScript 中還要先定義他的參數、State 的型別不然 Ts 會報錯</p><h3 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h3><p>需要一個東西來管理全域都會使用到的資料比如使用者資訊，有考慮過三種方法</p><ol><li>使用global</li><li>RN的Context</li><li>Redux</li></ol><p>第一種感覺不是很好，畢竟資料一多一定會導致載入時間便很長而且難以維護，Context API 因為一開始都是用 Class Component寫的所以沒使用，第三種Redux 就是設定有點麻煩但是最後還是選他，但這次想試試看新的Redux toolkit</p><h4 id="Redux-Toolkit-1"><a href="#Redux-Toolkit-1" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h4><blockquote><p>Redux <strong>Toolkit</strong>包旨在成為編寫<a href="https://redux.js.org/">Redux</a>邏輯的標準方法。它最初是為了幫助解決有關 Redux 的三個常見問題而創建的：</p><ul><li>“配置 Redux 存儲太複雜”</li><li>“我必須添加很多包才能讓 Redux 做任何有用的事情”</li><li>“Redux 需要太多樣板代碼”</li></ul><p>我們無法解決每個用例，但我們可以嘗試提供一些工具來抽象設置過程並處理最常見的用例，並包含一些有用的實用程序，讓用戶簡化他們的操作應用程序代碼。</p></blockquote><p>幾年前用Redux最大的問題就是有很多的配置還有套件要一起手動裝上 裝完Redux核心還要裝上Saga 、thunk… 裝完眼也花了還發現沒成功又要繼續翻文件 雖然最後還是弄好了但是安裝的使用體驗實在是很不好，官方並沒有提供如同<a href="https://github.com/facebook/create-react-app"><code>create-react-app</code></a> 這種一鍵安裝、開箱即用的工具，Redux Toolkit的出現解決了這三種問題讓配置過程簡單快速大大的減少使用上的挫敗感，而且 reducer action 也簡化成一個個slice 讓程式看起來更簡潔，缺點就是官方並沒有在文件說明怎麼跟Class component一起使用，網路上是說可以用connect但我是用 function component 將類組件包起來後將資料傳遞過去解決</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近主管終於放棄 Xamarin 改使用 ReactNative 開發 APP，作為提出建議的人這個任務最後也落到我頭上來了，記憶中最後一次</summary>
      
    
    
    
    
    <category term="ReactNative" scheme="https://williamlin062.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 189</title>
    <link href="https://williamlin062.github.io/2023/06/30/leetcode-189/"/>
    <id>https://williamlin062.github.io/2023/06/30/leetcode-189/</id>
    <published>2023-06-30T07:10:32.000Z</published>
    <updated>2023-07-03T09:40:34.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施工中…"><a href="#施工中…" class="headerlink" title="施工中…"></a>施工中…</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;施工中…&quot;&gt;&lt;a href=&quot;#施工中…&quot; class=&quot;headerlink&quot; title=&quot;施工中…&quot;&gt;&lt;/a&gt;施工中…&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://williamlin062.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>VisualStudio好用快捷鍵</title>
    <link href="https://williamlin062.github.io/2023/06/30/VisualStudio%E5%A5%BD%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%8D%B5/"/>
    <id>https://williamlin062.github.io/2023/06/30/VisualStudio%E5%A5%BD%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%8D%B5/</id>
    <published>2023-06-30T06:07:12.000Z</published>
    <updated>2023-07-03T03:45:31.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提取方法重構"><a href="#提取方法重構" class="headerlink" title="提取方法重構"></a>提取方法重構</h1><p><strong>功能:</strong> 將程式片段轉為方法</p><p><strong>快捷鍵:</strong> “Ctrl+R”+“Ctrl+M”</p><h1 id="多重選取"><a href="#多重選取" class="headerlink" title="多重選取"></a>多重選取</h1><ul><li>Ctrl+ Alt+ 單擊：添加輔助插入符</li><li>Ctrl+ Alt+ 雙擊：添加輔助單詞選擇</li><li>Ctrl+ Alt+ 單擊 + 拖動：添加輔助選擇</li><li>Shift+ Alt+ .：添加下一個匹配文本作為選擇</li><li>Shift+ Alt+ ;: 添加所有匹配的文本作為選擇</li><li>Shift+ Alt+ ,: 刪除最後選定的事件</li><li>Shift+ Alt+ &#x2F;: 跳過下一個匹配的出現</li><li>Alt+ 單擊：添加框選擇</li><li>Esc 或單擊：清除所有選擇</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提取方法重構&quot;&gt;&lt;a href=&quot;#提取方法重構&quot; class=&quot;headerlink&quot; title=&quot;提取方法重構&quot;&gt;&lt;/a&gt;提取方法重構&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;功能:&lt;/strong&gt; 將程式片段轉為方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快捷鍵:&lt;/st</summary>
      
    
    
    
    
    <category term="VisualStudio" scheme="https://williamlin062.github.io/tags/VisualStudio/"/>
    
  </entry>
  
  <entry>
    <title>MAUI學習筆記</title>
    <link href="https://williamlin062.github.io/2023/06/29/MAUI%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    <id>https://williamlin062.github.io/2023/06/29/MAUI%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</id>
    <published>2023-06-29T07:30:08.000Z</published>
    <updated>2023-06-30T06:16:56.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><p>需要使用C#開發APP</p><h1 id="進度"><a href="#進度" class="headerlink" title="進度"></a>進度</h1><p>經過資料蒐集跟同事討論還有使用，這是一個不穩定的工具在github上還有大量錯誤還沒有解決，並且微軟對這項工具的態度還有社群讓我對Xamarin、MAUI非常沒有信心，因此會減少投入在這項工具的時間，如果可以希望上面能考慮使用Flutter，ReactNative等已經發展一段時間的工具甚至是直接開發原生APP，我相信都好過在不穩定且錯誤無法得到解決方法更新緩慢的工具上開發</p><h1 id="施工中…"><a href="#施工中…" class="headerlink" title="施工中…"></a>施工中…</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;p&gt;需要使用C#開發APP&lt;/p&gt;
&lt;h1 id=&quot;進度&quot;&gt;&lt;a href=&quot;#進度&quot; class=&quot;headerlink&quot; title=&quot;進度</summary>
      
    
    
    
    
    <category term="C#" scheme="https://williamlin062.github.io/tags/C/"/>
    
    <category term="MAUI" scheme="https://williamlin062.github.io/tags/MAUI/"/>
    
    <category term="跨平台開發" scheme="https://williamlin062.github.io/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%96%8B%E7%99%BC/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_26 RemoveDuplicates</title>
    <link href="https://williamlin062.github.io/2023/06/29/leetcode-26/"/>
    <id>https://williamlin062.github.io/2023/06/29/leetcode-26/</id>
    <published>2023-06-29T02:09:02.000Z</published>
    <updated>2023-06-29T03:32:55.453Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveDuplicates</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">int</span> uniqueCount =  nums.Distinct().Count(); <span class="comment">//不重複數量</span></span><br><span class="line">            <span class="built_in">int</span>[] uniqueNumbers = <span class="keyword">new</span> <span class="built_in">int</span>[uniqueCount]; <span class="comment">//建立陣列裝不重複數字</span></span><br><span class="line">            Array.Copy( nums.Distinct().ToArray(), uniqueNumbers, uniqueCount);</span><br><span class="line">            <span class="comment">//複製nums的不重複元素至剛剛建立的陣列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uniqueNumbers.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i] = uniqueNumbers[i];<span class="comment">//取代</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> uniqueCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為題目說前面開頭k個數字跟他需要的數字一樣就可以所以不用多餘的數字</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="C#" scheme="https://williamlin062.github.io/tags/C/"/>
    
    <category term="LeetCode" scheme="https://williamlin062.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>如何該改dbml連線字串</title>
    <link href="https://williamlin062.github.io/2023/06/29/%E5%A6%82%E4%BD%95%E8%A9%B2%E6%94%B9dbml%E9%80%A3%E7%B7%9A%E5%AD%97%E4%B8%B2/"/>
    <id>https://williamlin062.github.io/2023/06/29/%E5%A6%82%E4%BD%95%E8%A9%B2%E6%94%B9dbml%E9%80%A3%E7%B7%9A%E5%AD%97%E4%B8%B2/</id>
    <published>2023-06-29T01:50:29.000Z</published>
    <updated>2023-06-29T02:30:33.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><p>之前更改dbml的連線字串都是先新增連接到資料庫在拖曳資料表進設計檔中，讓vs自動該改連線字串到新的資料庫，或者更改app.config的連線字串</p><p>但是這兩種方法在把dbml放在單獨的組件中時不起作用，每次重建時都會重製回更改前也無法拖曳資料表到dbml中，於是仔細研究Visual Studio究竟是去哪抓連線字串還有事怎麼新增連線字串的</p><h1 id="更改方法"><a href="#更改方法" class="headerlink" title="更改方法"></a>更改方法</h1><p>Visual Studio將連線字串放置在組件中Properties底下的Settings.settings中</p><p>如要更改連線字串首先打開Settings.settings會出現表格文件</p><img src="/2023/06/29/%E5%A6%82%E4%BD%95%E8%A9%B2%E6%94%B9dbml%E9%80%A3%E7%B7%9A%E5%AD%97%E4%B8%B2/dbmlChangeConnection.png" class=""><p>這個文件可以添加應用程式屬性和其他資訊，點選最下方欄位或又見可以新增設定</p><p>類型選擇連接字串，若是有其他已經在使用的連接字串請更改使用中的連接字串，VS只會只用當前連接字串會忽視後來新增的，除非有檢測到當前資料表跟資料來源不同才會切換。</p><p>點選 ‘值’欄位最後方會出現編輯選項按鈕點開會出現連接屬性</p><img src="/2023/06/29/%E5%A6%82%E4%BD%95%E8%A9%B2%E6%94%B9dbml%E9%80%A3%E7%B7%9A%E5%AD%97%E4%B8%B2/dbmlSetting.png" class=""><p>填寫完資料庫伺服器資訊後測試連接成功案確定即可新增&#x2F;該改連接字串。</p><p>修改完後記得重建組件重啟應用程式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;p&gt;之前更改dbml的連線字串都是先新增連接到資料庫在拖曳資料表進設計檔中，讓vs自動該改連線字串到新的資料庫，或者更改app.config的連</summary>
      
    
    
    
    
    <category term="Asp.Net" scheme="https://williamlin062.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>SqlServer筆記</title>
    <link href="https://williamlin062.github.io/2023/06/20/SqlServer%E7%AD%86%E8%A8%98/"/>
    <id>https://williamlin062.github.io/2023/06/20/SqlServer%E7%AD%86%E8%A8%98/</id>
    <published>2023-06-20T06:55:50.000Z</published>
    <updated>2023-06-20T07:15:00.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><h3 id="紀錄遇到的問題和解決方法，加深記憶"><a href="#紀錄遇到的問題和解決方法，加深記憶" class="headerlink" title="紀錄遇到的問題和解決方法，加深記憶"></a>紀錄遇到的問題和解決方法，加深記憶</h3><h1 id="使用TempTable"><a href="#使用TempTable" class="headerlink" title="使用TempTable"></a>使用TempTable</h1><h5 id="使用select-into-table-name-會建立新的暫存表，使用前要確認暫存表還在不在，在的話要記得刪掉不然會錯，使用完要記得刪掉"><a href="#使用select-into-table-name-會建立新的暫存表，使用前要確認暫存表還在不在，在的話要記得刪掉不然會錯，使用完要記得刪掉" class="headerlink" title="使用select into [table_name]會建立新的暫存表，使用前要確認暫存表還在不在，在的話要記得刪掉不然會錯，使用完要記得刪掉"></a>使用select into [table_name]會建立新的暫存表，使用前要確認暫存表還在不在，在的話要記得刪掉不然會錯，使用完要記得刪掉</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #[<span class="keyword">table</span><span class="operator">-</span>name]</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> column1, column2, column3, ... <span class="keyword">as</span> [name]</span><br><span class="line"><span class="keyword">into</span> #[tablename]</span><br><span class="line"><span class="keyword">from</span> [<span class="keyword">table</span>] [簡稱]</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> #[<span class="keyword">table</span><span class="operator">-</span>name]</span><br></pre></td></tr></table></figure><h1 id="合併沒共通鍵的表"><a href="#合併沒共通鍵的表" class="headerlink" title="合併沒共通鍵的表"></a>合併沒共通鍵的表</h1><h3 id="使用cross-join或者join-on-1-x3D-1都可以，建議使用cross-join語意上會直觀很多"><a href="#使用cross-join或者join-on-1-x3D-1都可以，建議使用cross-join語意上會直觀很多" class="headerlink" title="使用cross join或者join on 1&#x3D;1都可以，建議使用cross join語意上會直觀很多"></a>使用cross join或者join on 1&#x3D;1都可以，建議使用cross join語意上會直觀很多</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> #temp1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> #temp2,#temp3</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;h3 id=&quot;紀錄遇到的問題和解決方法，加深記憶&quot;&gt;&lt;a href=&quot;#紀錄遇到的問題和解決方法，加深記憶&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="SQlServer" scheme="https://williamlin062.github.io/tags/SQlServer/"/>
    
  </entry>
  
  <entry>
    <title>xamarin學習筆記</title>
    <link href="https://williamlin062.github.io/2023/06/17/xamarin%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    <id>https://williamlin062.github.io/2023/06/17/xamarin%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</id>
    <published>2023-06-17T01:26:21.000Z</published>
    <updated>2023-06-29T07:29:39.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><h3 id="因應公司有項目要使用-Xamarin-開發要做準備"><a href="#因應公司有項目要使用-Xamarin-開發要做準備" class="headerlink" title="因應公司有項目要使用 Xamarin 開發要做準備"></a>因應公司有項目要使用 Xamarin 開發要做準備</h3><h1 id="Xamarin-根元素屬性"><a href="#Xamarin-根元素屬性" class="headerlink" title="Xamarin 根元素屬性"></a>Xamarin 根元素屬性</h1><h2 id="命名空間-xmlns"><a href="#命名空間-xmlns" class="headerlink" title="命名空間 xmlns"></a>命名空間 xmlns</h2><h3 id="根據官方文件說明"><a href="#根據官方文件說明" class="headerlink" title="根據官方文件說明"></a>根據官方文件說明</h3><blockquote><p><em>XAML 使用 xmlns XML 屬性進行命名空間聲明。本文介紹 XAML 命名空間語法，並演示如何聲明 XAML 命名空間以訪問類型。</em></p></blockquote><h3 id="格式如下"><a href="#格式如下" class="headerlink" title="格式如下"></a>格式如下</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:&#123;XML namespace name&#125;=&quot;clr-namespace:&#123;.NET namespace&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Shell</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:views</span> =<span class="string">&quot;clr-namespace:Test01&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:local</span> =<span class="string">&quot;clr-namespace:Test01.View&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">x:Class</span>=<span class="string">&quot;Test01.MainShell&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">Title</span>=<span class="string">&quot;APP&quot;</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span><br><span class="line"><span class="comment">//第一個命名空間 將整個XAML命名空間應設為默認命名空間</span></span><br><span class="line"><span class="comment">//WPF程序集會將比如System.Windows System.Windows.Controls映射到這類命名空間</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span><br><span class="line"> //第二個命名空間會用xmlns:x ，將映射單獨的命名空間至x:前墜</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:views =&quot;clr-namespace:Test01&quot; //映射到自定義類和程序集views</span><br><span class="line">//clr-namespace:在程序集中聲明的 CLR 命名空間，其中包含要公開為元素的公共類型。</span><br></pre></td></tr></table></figure><h3 id="自訂命名空間-SDKSample"><a href="#自訂命名空間-SDKSample" class="headerlink" title="自訂命名空間 SDKSample"></a>自訂命名空間 SDKSample</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SDKSample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">ContentControl</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExampleClass</span>()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在跟標記中使用帶前綴的引用-xmlns-custom-使-ExampleClass-在-UI-中進行實例化"><a href="#在跟標記中使用帶前綴的引用-xmlns-custom-使-ExampleClass-在-UI-中進行實例化" class="headerlink" title="在跟標記中使用帶前綴的引用 xmlns:custom 使 ExampleClass 在 UI 中進行實例化"></a>在跟標記中使用帶前綴的引用 xmlns:custom 使 ExampleClass 在 UI 中進行實例化</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">x:Class</span>=<span class="string">&quot;WPFApplication1.MainPage&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:custom</span>=<span class="string">&quot;clr-namespace:SDKSample;assembly=SDKSampleLibrary&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">custom:ExampleClass</span>/&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="映射到當前程序集"><a href="#映射到當前程序集" class="headerlink" title="映射到當前程序集"></a>映射到當前程序集</h3><p><code>assemblyclr-namespace</code>如果引用的對像是在與引用自定義類的應用程序代碼相同的程序集中定義的，則可以省略。或者，這種情況的等效語法是指定<code>assembly=</code>，等號後面沒有字符串標記。</p><p>如果在同一程序集中定義自定義類，則不能將其用作頁面的根元素。部分類不需要映射；如果您打算在 XAML 中將它們引用為元素，則僅需要映射應用程序中頁面的分部類以外的類。</p><h1 id="Shell-應用程式"><a href="#Shell-應用程式" class="headerlink" title="Shell 應用程式"></a>Shell 應用程式</h1><p>在 Xamarin 4.0 中新增的功能不同於一般的 Page, Shell 是一種基於 URI 的導航方式本身的功能只負責導航，大部分應用程式常見的導航方式都可以使用 Shell 實現，要使用必須在 App.cs 中將首頁設為 Shell 頁面</p><h2 id="繼承-Shell-的子類"><a href="#繼承-Shell-的子類" class="headerlink" title="繼承 Shell 的子類"></a>繼承 Shell 的子類</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainShell</span> : <span class="title">Shell</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainShell</span>()</span>&#123;</span><br><span class="line">           InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Xaml"><a href="#Xaml" class="headerlink" title="Xaml"></a>Xaml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Shell</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">x:Class</span>=<span class="string">&quot;MyApp.AppShell&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!---控件放這---&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Shell</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="App-設定入口頁面"><a href="#App-設定入口頁面" class="headerlink" title="App 設定入口頁面"></a>App 設定入口頁面</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">App</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            MainPage = <span class="keyword">new</span> MainShell();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="導航版面設計"><a href="#導航版面設計" class="headerlink" title="導航版面設計"></a>導航版面設計</h2><h4 id="Shell-的子控件分為三大類"><a href="#Shell-的子控件分為三大類" class="headerlink" title="Shell 的子控件分為三大類"></a>Shell 的子控件分為三大類</h4><ol><li>TabBar 或 FlyoutItem: 底部標籤，側邊手風琴彈出視窗，兩者同時只能使用一個若是出現在同一個 Shell 會使用最上面那個為主另一個不顯示</li><li>Tab:用來幫 ShellContent 分組</li><li>ShellContent:每個導航選項卡的頁面，如果 Tab 外出現多個 ShellContent 則會出現在底部標籤列</li></ol><h4 id="FlyoutItem-屬性"><a href="#FlyoutItem-屬性" class="headerlink" title="FlyoutItem 屬性"></a>FlyoutItem 屬性</h4><p>FlyoutDisplayOptions:設定有多少控件在 FlyoutItem 中時將標籤移至手風情選單中，莫認為 AsSingleItem</p><h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h4><h5 id="以下-xaml-手風琴選單中會有"><a href="#以下-xaml-手風琴選單中會有" class="headerlink" title="以下 xaml 手風琴選單中會有"></a>以下 xaml 手風琴選單中會有</h5><ol><li>首頁</li><li>我的帳戶</li><li>登入</li></ol><h5 id="首頁中會有三個子頁面導航標籤"><a href="#首頁中會有三個子頁面導航標籤" class="headerlink" title="首頁中會有三個子頁面導航標籤"></a>首頁中會有三個子頁面導航標籤</h5><ol><li>專欄文章</li><li>熱門文章</li><li>全球焦點</li></ol><h5 id="其他-Tab-以此類推"><a href="#其他-Tab-以此類推" class="headerlink" title="其他 Tab 以此類推"></a>其他 Tab 以此類推</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;Shell xmlns=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span><br><span class="line">       xmlns:x=<span class="string">&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span></span><br><span class="line">       x:Class=<span class="string">&quot;MyApp.AppShell&quot;</span>&gt;</span><br><span class="line">   &lt;FlyoutItem Title=<span class="string">&quot;首頁&quot;</span>&gt;</span><br><span class="line">        &lt;Tab Title=<span class="string">&quot;首頁&quot;</span>&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;專欄文章&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:FrontPage&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;熱門文章&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:MessageList&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;全球焦點&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:Login&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;/Tab&gt;</span><br><span class="line">        &lt;Tab Title=<span class="string">&quot;財富管理&quot;</span>&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;全權委託&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:FrontPage&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;AI人工智慧財&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:Login&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;/Tab&gt;</span><br><span class="line">        &lt;Tab Title=<span class="string">&quot;關於我們&quot;</span>&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;公司簡介&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:FrontPage&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;經營理念&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:Login&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;ShellContent Title=<span class="string">&quot;服務項目&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:Login&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;/Tab&gt;</span><br><span class="line">    &lt;/FlyoutItem&gt;</span><br><span class="line">    &lt;FlyoutItem  FlyoutDisplayOptions=<span class="string">&quot;AsMultipleItems&quot;</span>&gt;</span><br><span class="line">        &lt;ShellContent Title=<span class="string">&quot;我的帳戶&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:FrontPage&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;ShellContent Title=<span class="string">&quot;登入&quot;</span> ContentTemplate=<span class="string">&quot;&#123;DataTemplate views:Login&#125;&quot;</span> /&gt;</span><br><span class="line">    &lt;/FlyoutItem&gt;</span><br><span class="line">&lt;/Shell&gt;</span><br></pre></td></tr></table></figure><h1 id="Application-Resources"><a href="#Application-Resources" class="headerlink" title="Application.Resources"></a>Application.Resources</h1><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Application</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">x:Class</span>=<span class="string">&quot;Test01.App&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><p>結果發現Xamarin From也是即將在2024停止維護，後續會被MAUI(Multi-platform App UI)取代因此將開新的一篇直接學習MAUI</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;h3 id=&quot;因應公司有項目要使用-Xamarin-開發要做準備&quot;&gt;&lt;a href=&quot;#因應公司有項目要使用-Xamarin-開發要做準備&quot; c</summary>
      
    
    
    
    
    <category term="C#" scheme="https://williamlin062.github.io/tags/C/"/>
    
    <category term="xamarin" scheme="https://williamlin062.github.io/tags/xamarin/"/>
    
    <category term=".Net" scheme="https://williamlin062.github.io/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>ASP筆記</title>
    <link href="https://williamlin062.github.io/2023/06/16/ASP%E7%AD%86%E8%A8%98/"/>
    <id>https://williamlin062.github.io/2023/06/16/ASP%E7%AD%86%E8%A8%98/</id>
    <published>2023-06-16T03:39:19.000Z</published>
    <updated>2023-06-16T03:42:52.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><h3 id="紀錄使用ASP的心得"><a href="#紀錄使用ASP的心得" class="headerlink" title="紀錄使用ASP的心得"></a>紀錄使用ASP的心得</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;h3 id=&quot;紀錄使用ASP的心得&quot;&gt;&lt;a href=&quot;#紀錄使用ASP的心得&quot; class=&quot;headerlink&quot; title=&quot;紀錄使用A</summary>
      
    
    
    
    
    <category term="ASP.NET" scheme="https://williamlin062.github.io/tags/ASP-NET/"/>
    
    <category term="ASP.NET_WebFrom" scheme="https://williamlin062.github.io/tags/ASP-NET-WebFrom/"/>
    
    <category term="ASP.NET_MVC" scheme="https://williamlin062.github.io/tags/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title>JASS_基本知識</title>
    <link href="https://williamlin062.github.io/2023/06/13/JASS-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98/"/>
    <id>https://williamlin062.github.io/2023/06/13/JASS-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98/</id>
    <published>2023-06-13T03:03:17.000Z</published>
    <updated>2023-06-13T08:24:55.795Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用 Ctrl + F 快速搜尋</p></blockquote><h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><h3 id="將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家。"><a href="#將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家。" class="headerlink" title="將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家。"></a>將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家。</h3><h3 id="完整的編輯器教學請去流連忘返的世界編輯器自學指南"><a href="#完整的編輯器教學請去流連忘返的世界編輯器自學指南" class="headerlink" title="完整的編輯器教學請去流連忘返的世界編輯器自學指南"></a>完整的編輯器教學請去流連忘返的世界編輯器自學指南<a href="https://www.wasabistudio.ca/wikis/we/"></a></h3><h1 id="JASS-是甚麼"><a href="#JASS-是甚麼" class="headerlink" title="JASS 是甚麼"></a>JASS 是甚麼</h1><h3 id="JASS-是暴雪開發的一款用於魔獸爭霸創建地圖的腳本語言，提供了非常豐富的-APId"><a href="#JASS-是暴雪開發的一款用於魔獸爭霸創建地圖的腳本語言，提供了非常豐富的-APId" class="headerlink" title="JASS 是暴雪開發的一款用於魔獸爭霸創建地圖的腳本語言，提供了非常豐富的 APId"></a>JASS 是暴雪開發的一款用於魔獸爭霸創建地圖的腳本語言，提供了非常豐富的 APId</h3><h1 id="為甚麼要使用-JASS"><a href="#為甚麼要使用-JASS" class="headerlink" title="為甚麼要使用 JASS"></a>為甚麼要使用 JASS</h1><ol><li>所有 GUI 觸發器本質上都是 JASS，他只是多了視覺化的操作而已</li><li>解放限制讓你能完整使用觸發器強大的功能</li><li>可以把一些常用功能寫成函數在各個地方使用</li><li>你會很常需要使用自訂函數，區域變數等功能使用 GUI 操作上會變得非常複雜</li><li>你可以在 vs code 或其他文字編輯器中編輯、管理腳本，函數自動提示語法高量會讓你的生活輕鬆很多</li><li>你不會因為崩潰損失未存檔的代碼還原只需要複製貼上</li></ol><h1 id="全域變數"><a href="#全域變數" class="headerlink" title="全域變數"></a>全域變數</h1><h3 id="定義方式"><a href="#定義方式" class="headerlink" title="定義方式"></a>定義方式</h3><h4 id="觸發器介面中新增變數也是這種方式，腳本中所有-globals-區塊都會被移到腳本最上層，可以定義在任何地方這些變數在整個腳本中都可以讀取到"><a href="#觸發器介面中新增變數也是這種方式，腳本中所有-globals-區塊都會被移到腳本最上層，可以定義在任何地方這些變數在整個腳本中都可以讀取到" class="headerlink" title="觸發器介面中新增變數也是這種方式，腳本中所有 globals 區塊都會被移到腳本最上層，可以定義在任何地方這些變數在整個腳本中都可以讀取到"></a>觸發器介面中新增變數也是這種方式，腳本中所有 globals 區塊都會被移到腳本最上層，可以定義在任何地方這些變數在整個腳本中都可以讀取到</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Init_globals takes nothing returns nothing</span><br><span class="line">  globals</span><br><span class="line">    //在這邊定義全域變數</span><br><span class="line">  endglobals</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><h1 id="區域變數"><a href="#區域變數" class="headerlink" title="區域變數"></a>區域變數</h1><h3 id="使用-local-可以定義只在這個函數存在的變數，有個小重點魔獸爭霸是不會自動回收沒使用的變數的，有繼承-handle-的物件都必須手動銷毀和指向-null，不然在大量執行後會導致記憶體外洩造成崩潰最常見的是點-location-沒有清理。"><a href="#使用-local-可以定義只在這個函數存在的變數，有個小重點魔獸爭霸是不會自動回收沒使用的變數的，有繼承-handle-的物件都必須手動銷毀和指向-null，不然在大量執行後會導致記憶體外洩造成崩潰最常見的是點-location-沒有清理。" class="headerlink" title="使用 local 可以定義只在這個函數存在的變數，有個小重點魔獸爭霸是不會自動回收沒使用的變數的，有繼承 handle 的物件都必須手動銷毀和指向 null，不然在大量執行後會導致記憶體外洩造成崩潰最常見的是點(location)沒有清理。"></a>使用 local 可以定義只在這個函數存在的變數，有個小重點魔獸爭霸是不會自動回收沒使用的變數的，有繼承 handle 的物件都必須手動銷毀和指向 null，不然在大量執行後會導致記憶體外洩造成崩潰最常見的是點(location)沒有清理。</h3><h3 id="要更改變數資料要使用-set-變數名稱-x3D-值"><a href="#要更改變數資料要使用-set-變數名稱-x3D-值" class="headerlink" title="要更改變數資料要使用 set [變數名稱]&#x3D;[值]"></a>要更改變數資料要使用 set [變數名稱]&#x3D;[值]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Local takes nothing returns nothing</span><br><span class="line"> local unit u= null</span><br><span class="line"> set u = null</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><h1 id="呼叫其他函數-function"><a href="#呼叫其他函數-function" class="headerlink" title="呼叫其他函數(function)"></a>呼叫其他函數(function)</h1><h3 id="在函數中要使用其他函數都必須使用-call，記得注意函數在腳本中的順序"><a href="#在函數中要使用其他函數都必須使用-call，記得注意函數在腳本中的順序" class="headerlink" title="在函數中要使用其他函數都必須使用 call，記得注意函數在腳本中的順序"></a>在函數中要使用其他函數都必須使用 call，記得注意函數在腳本中的順序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Local takes nothing returns nothing</span><br><span class="line">    call functionName()</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><h1 id="觸發器-Trigger"><a href="#觸發器-Trigger" class="headerlink" title="觸發器(Trigger)"></a>觸發器(Trigger)</h1><h3 id="相信開始接觸-Jass-代表你對觸發器已經有基本的概念，觸發器在-GUI-中主要分為三個部分-事件、條件、動作，在編輯-gt-轉化為自訂義腳本中可以發現在-JASS-中觸發器也是分成這三個部分，只是多了一個負責-InitTrigger-的部分。"><a href="#相信開始接觸-Jass-代表你對觸發器已經有基本的概念，觸發器在-GUI-中主要分為三個部分-事件、條件、動作，在編輯-gt-轉化為自訂義腳本中可以發現在-JASS-中觸發器也是分成這三個部分，只是多了一個負責-InitTrigger-的部分。" class="headerlink" title="相信開始接觸 Jass 代表你對觸發器已經有基本的概念，觸發器在 GUI 中主要分為三個部分 事件、條件、動作，在編輯-&gt;轉化為自訂義腳本中可以發現在 JASS 中觸發器也是分成這三個部分，只是多了一個負責 InitTrigger 的部分。"></a>相信開始接觸 Jass 代表你對觸發器已經有基本的概念，觸發器在 GUI 中主要分為三個部分 事件、條件、動作，在編輯-&gt;轉化為自訂義腳本中可以發現在 JASS 中觸發器也是分成這三個部分，只是多了一個負責 InitTrigger 的部分。</h3><h3 id="使用-GUI-創建新的觸發實際上執行的工作是這些"><a href="#使用-GUI-創建新的觸發實際上執行的工作是這些" class="headerlink" title="使用 GUI 創建新的觸發實際上執行的工作是這些"></a>使用 GUI 創建新的觸發實際上執行的工作是這些</h3><ol><li>新增初始化 function ，在裡面創建新的觸發器(trigger)註冊條件(condition function)、動作(function)、事件(event)，分別是 TriggerAddCondition(trigName, Condition(function funcName) )，TriggerAddAction(trigName,function ActionFuncName)，TriggerRegisterEventFunction</li><li>新增條件，動作函數(function)名稱是 Trig_你的觸發器名稱_Action\Condition</li><li>放到 Jass 腳本中最底下 Init 中呼叫初始化，這邊有個重點 Jass 是自上而下逐行執行的所以放在上面的函數是讀不到下面的函數的</li></ol><blockquote><p>註冊是不用照順序的你要先註冊動作還是事件條件都可以</p></blockquote><h3 id="這是觸發做的回復魔力技能"><a href="#這是觸發做的回復魔力技能" class="headerlink" title="這是觸發做的回復魔力技能"></a>這是觸發做的回復魔力技能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function Trig_MeditationConditions takes nothing returns boolean</span><br><span class="line">  return ((GetSpellAbilityId() == &#x27;A011&#x27;))</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">function Trig_MeditationActions takes nothing returns nothing</span><br><span class="line">  local unit u = GetSpellAbilityUnit()</span><br><span class="line">  local integer level = GetUnitAbilityLevel(u, &#x27;A011&#x27;)</span><br><span class="line">  local real maxMana = GetUnitStateSwap(UNIT_STATE_MAX_MANA, u)</span><br><span class="line">  local real Mana = GetUnitStateSwap(UNIT_STATE_MANA, u)</span><br><span class="line">  local real recoverMana = Mana + maxMana *(0.2 +(0.05 * level))</span><br><span class="line"></span><br><span class="line">  call SetUnitManaBJ( u, recoverMana )</span><br><span class="line">  set u = null</span><br><span class="line"></span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">//===========================================================================</span><br><span class="line">function InitTrig_Meditation takes nothing returns nothing</span><br><span class="line">  set gg_trg_Meditation = CreateTrigger()</span><br><span class="line"></span><br><span class="line">  call TriggerRegisterAnyUnitEventBJ( gg_trg_Meditation, EVENT_PLAYER_UNIT_SPELL_EFFECT )</span><br><span class="line">  call TriggerAddCondition(gg_trg_Meditation, Condition(function Trig_MeditationConditions))</span><br><span class="line">  call TriggerAddAction(gg_trg_Meditation, function Trig_MeditationActions)</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Ctrl + F 快速搜尋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;h3 id=&quot;將一些過去的經驗整理出來，有</summary>
      
    
    
    
    
    <category term="WE" scheme="https://williamlin062.github.io/tags/WE/"/>
    
    <category term="JASS" scheme="https://williamlin062.github.io/tags/JASS/"/>
    
  </entry>
  
  <entry>
    <title>JASS_基本函數筆記</title>
    <link href="https://williamlin062.github.io/2023/06/13/JASS-%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B8%E7%AD%86%E8%A8%98/"/>
    <id>https://williamlin062.github.io/2023/06/13/JASS-%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B8%E7%AD%86%E8%A8%98/</id>
    <published>2023-06-13T02:40:33.000Z</published>
    <updated>2023-06-13T07:57:00.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用Ctrl + F快速搜尋</p></blockquote><h1 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h1><h3 id="將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家"><a href="#將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家" class="headerlink" title="將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家"></a>將一些過去的經驗整理出來，有人來問時可以比較有系統的將知識傳遞給對方，近年資源也日漸稀少而且分散做個紀錄也方便大家</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用Ctrl + F快速搜尋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;動機&quot;&gt;&lt;a href=&quot;#動機&quot; class=&quot;headerlink&quot; title=&quot;動機&quot;&gt;&lt;/a&gt;動機&lt;/h1&gt;&lt;h3 id=&quot;將一些過去的經驗整理出來，有人來</summary>
      
    
    
    
    
    <category term="WE" scheme="https://williamlin062.github.io/tags/WE/"/>
    
    <category term="JASS" scheme="https://williamlin062.github.io/tags/JASS/"/>
    
  </entry>
  
</feed>
